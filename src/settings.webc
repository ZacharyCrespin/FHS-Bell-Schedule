---
title: Settings
description: Settings
layout: main.webc
---
<div class="box">
  <label for="theme">Theme</label>
  <select name="theme" id="theme">
    <option value="system">Auto <span class="light">(default)</span></option>
    <option value="light">Light</option>
    <option value="dark">Dark</option>
    <option value="custom">Custom</option>
  </select>
  <div id="customInputs" style="display: none;">
    <label for="bgColorInput">Background</label>
    <input id="bgColorInput" type="text" value="hsl(202 22% 90%)">
    <br>
    <label for="fgColorInput">Foreground <span class="light">(Text, Borders)</span></label>
    <input id="fgColorInput" type="text" value="hsl(213 22% 10%)">
    <br>
    <label for="secColorInput">Secondary <span class="light">(Light Text, Hover)</span></label>
    <input id="secColorInput" type="text" value="hsl(213 22% 30%)">
    <br>
    <label for="tirColorInput">Tertiary <span class="light">(Dividers)</span></label>
    <input id="tirColorInput" type="text" value="hsl(213 22% 70%)">
  </div>
</div>
<script>
  const themeSelect = document.querySelector("#theme")
  const customInputs = document.querySelector("#customInputs")
  const bgColorInput = document.querySelector("#bgColorInput")
  const fgColorInput = document.querySelector("#fgColorInput")
  const secColorInput = document.querySelector("#secColorInput")
  const tirColorInput = document.querySelector("#tirColorInput")

  let settings = {
    theme: "system",
    lastSave: null,
  }
  let localSettings = localStorage.getItem('fhsbs-settings')
  if (localSettings) {
    settings = JSON.parse(localSettings);
    displaySettings();
  }

  themeSelect.addEventListener("change", () => {
    const theme = themeSelect.value;
    settings.theme = theme;
    if (theme == 'custom') {
      settings.customTheme = {
        "background": "hsl(202 22% 90%)",
        "foreground": "hsl(213 22% 10%)",
        "secondary": "hsl(213 22% 30%)",
        "tertiary": "hsl(213 22% 70%)",
      }
      customInputs.style.display = '';
    } else {
      customInputs.style.display = 'none';
    }
    saveSettings();
    loadSettings();
  })

  function displaySettings() {
    themeSelect.value = settings.theme
    if (settings.theme == 'custom') {
      customInputs.style.display = '';
      bgColorInput.value = settings.customTheme.background
      fgColorInput.value = settings.customTheme.foreground
      secColorInput.value = settings.customTheme.secondary
      tirColorInput.value = settings.customTheme.tertiary
    } else {
      customInputs.style.display = 'none';
    }
  }

  // Save to local storage
  function saveSettings() {
    settings.lastSave = new Date;
    localStorage.setItem("fhsbs-settings", JSON.stringify(settings));
  }

  // Custom color inputs
  bgColorInput.addEventListener("change", () => {
    const color = bgColorInput.value;
    settings.customTheme.background = color;
    saveSettings();
    loadSettings();
  })
  fgColorInput.addEventListener("change", () => {
    const color = fgColorInput.value;
    settings.customTheme.foreground = color;
    saveSettings();
    loadSettings();
  })
  secColorInput.addEventListener("change", () => {
    const color = secColorInput.value;
    settings.customTheme.secondary = color;
    saveSettings();
    loadSettings();
  })
  tirColorInput.addEventListener("change", () => {
    const color = tirColorInput.value;
    settings.customTheme.tertiary = color;
    saveSettings();
    loadSettings();
  })
</script>

---
title: Settings
description: Settings
layout: main.webc
coloris: true
---
<bye></bye>
<div class="box">
  <label for="theme">Theme</label>
  <select name="theme" id="theme" class="input">
    <option value="system">Auto <span class="light">(default)</span></option>
    <option value="light">Light</option>
    <option value="dark">Dark</option>
    <option value="custom">Custom</option>
  </select>
  <div id="customInputs" style="display: none;">
    <hr>
    <label for="bgColorInput">Background</label>
    <input id="bgColorInput" type="text" data-coloris class="input" value="#e0e7eb">
    <br><hr>
    <label for="fgColorInput">Foreground <span class="light">(Text, Borders)</span></label>
    <input id="fgColorInput" type="text" data-coloris class="input" value="#14191f">
    <br><hr>
    <label for="secColorInput">Secondary <span class="light">(Light Text, Hover)</span></label>
    <input id="secColorInput" type="text" data-coloris class="input" value="#3c4b5d">
    <br><hr>
    <label for="tirColorInput">Tertiary <span class="light">(Dividers)</span></label>
    <input id="tirColorInput" type="text" data-coloris class="input" value="#a2b1c3">
  </div>
</div>
<script>
  // Elements
  const themeSelect = document.querySelector("#theme") // Main theme select
  const customInputs = document.querySelector("#customInputs") // Custom inputs div
  // Custom color inputs
  const bgColorInput = document.querySelector("#bgColorInput")
  const fgColorInput = document.querySelector("#fgColorInput")
  const secColorInput = document.querySelector("#secColorInput")
  const tirColorInput = document.querySelector("#tirColorInput")

  // Deafult settins values
  let settings = {
    theme: "system",
    lastSave: null,
  }

  // If settings are saved in localStorage show the curent vaues
  let localSettings = localStorage.getItem('fhsbs-settings')
  if (localSettings) {
    settings = JSON.parse(localSettings);
    displaySettings();
  }

  themeSelect.addEventListener("change", () => {
    const theme = themeSelect.value;
    settings.theme = theme;
    if (theme == 'custom') {
      // Defaults colors for custom theme
      settings.customTheme = {
        "background": "#e0e7eb",
        "foreground": "#14191f",
        "secondary": "#3c4b5d",
        "tertiary": "#a2b1c3",
      };
      // Set the text to the default color
      bgColorInput.value = "#e0e7eb";
      fgColorInput.value = "#14191f";
      secColorInput.value = "#3c4b5d";
      tirColorInput.value = "#a2b1c3";
      // Set the dispayed color to the default
      bgColorInput.parentElement.style.color = "#e0e7eb";
      fgColorInput.parentElement.style.color = "#14191f";
      secColorInput.parentElement.style.color = "#3c4b5d";
      tirColorInput.parentElement.style.color = "#a2b1c3";
      // Show the custom color inputs
      customInputs.style.display = '';
    } else {
      // Hide the custom color inputs
      customInputs.style.display = 'none';
      // Remove any custom colors being showen
      document.documentElement.style.removeProperty("--background");
      document.documentElement.style.removeProperty("--foreground");
      document.documentElement.style.removeProperty("--secondary");
      document.documentElement.style.removeProperty("--tertiary");
    }
    saveSettings();
    loadSettings();
  })

  // Show the curent values in the inputs
  function displaySettings() {
    themeSelect.value = settings.theme
    if (settings.theme == 'custom') {
      bgColorInput.value = settings.customTheme.background;
      fgColorInput.value = settings.customTheme.foreground;
      secColorInput.value = settings.customTheme.secondary;
      tirColorInput.value = settings.customTheme.tertiary;
      // Show the custom color inputs
      customInputs.style.display = '';
    } else {
      // Hide the custom color inputs
      customInputs.style.display = 'none';
    }
  }

  // Save to local storage
  function saveSettings() {
    settings.lastSave = new Date;
    localStorage.setItem("fhsbs-settings", JSON.stringify(settings));
  }

  // Custom color inputs
  bgColorInput.addEventListener("change", () => {
    const color = bgColorInput.value;
    settings.customTheme.background = color;
    saveSettings();
    loadSettings();
  })
  fgColorInput.addEventListener("change", () => {
    const color = fgColorInput.value;
    settings.customTheme.foreground = color;
    saveSettings();
    loadSettings();
  })
  secColorInput.addEventListener("change", () => {
    const color = secColorInput.value;
    settings.customTheme.secondary = color;
    saveSettings();
    loadSettings();
  })
  tirColorInput.addEventListener("change", () => {
    const color = tirColorInput.value;
    settings.customTheme.tertiary = color;
    saveSettings();
    loadSettings();
  })

  // Customize color inputs
  Coloris({
    themeMode: 'light',
    alpha: false, // Don't allow transparency
    format: 'hex',
    formatToggle: true,
  });
</script>
